# -*- coding: utf-8 -*-
"""Qiskit Bloch Sphere.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uBkHUq_h0FokKhtOqa5CaJ0djJGRvHU4
"""

pip install qiskit

## import the libraries
import numpy as np
from qiskit import *
qiskit.__qiskit_version__

# Commented out IPython magic to ensure Python compatibility.
from qiskit.visualization import plot_bloch_vector
# %matplotlib inline

plot_bloch_vector([0,1,0], title="Bloch Sphere")

#X-gate on a |0> qubit
qc = QuantumCircuit(1)
qc.x(0)
qc.draw()

qc.y(0) # Do Y-gate on qubit 0
qc.z(0) # Do Z-gate on qubit 0
qc.draw()

# Create Hadamard gate for the X-measurement function:
def x_measurement(qc,qubit,cbit):
    """Measure 'qubit' in the X-basis, and store the result in 'cbit'"""
    qc.h(qubit)
    qc.measure(qubit, cbit)
    qc.h(qubit)
    return qc

initial_state = [0,1]
# Initialise our qubit and measure it
qc = QuantumCircuit(1,1)
qc.initialize(initial_state, 0)
x_measurement(qc, 0, 0)  # measure qubit 0 to classical bit 0
qc.draw()

# quantum circuit to create a Bell state
bell = QuantumCircuit(2, 2)
bell.h(0)
bell.cx(0, 1)

meas = QuantumCircuit(2, 2)
meas.measure([0,1], [0,1])

# execute the quantum circuit
backend = BasicAer.get_backend('qasm_simulator') # the device to run on
circ = bell + meas
result = execute(circ, backend, shots=1000).result()
counts  = result.get_counts(circ)
print(counts)

from qiskit.visualization import plot_histogram
plot_histogram(counts)